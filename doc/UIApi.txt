Disclaimer:

Mamy glowna klase `AbstractComponent` ktora zapewnia podstawowa funkcjonalnosc dla wszystkich elementow. Z niej dziedzicza 
wszystkie pozostale klasy oprocz Template, ClassManager i jeszcze czegos.
Strone budujemy z following elementow :
	- view : wrapper na caly content, cos jak <div id="wrapper".
	- panel : podstawowy kontener, zwykly 'div'	
	- text : cos a la span, kontener ktory renderuje tylko tekst i ma mozliwosc formatowania go na rozne sposoby
	- window : okno lub popup, cos jak okno w explorejtorze windows. Dziedziczy po panelu i ma dodatkowo pasek nazwy na gorze oraz bordery.
	- popup : dziedziczy po window. Rozni sie tym,ze natywnie obsluguje guziki i ma z-index.
	- grid : tabelka ?
	- scroller
	- input
		- button
		- text
		- checkbox
		- list
		- combo
	- toolbar
		- menu item
	- context menu
		- menu item
	- image item
	- Video item

	Tworzenie nowego elementu:

	var pnl = new ChUI.Panel();

	var pnl2 = new ChUI.Panel({
		option : value
	});


CanvasDOM:

Kazdy element mozemy rozpatrywac w kategorii odpowiadajacych mu elementow DOM. W zaleznosci od elementu mozemy do niego dodawac dzieci lub nie (np inputy sa juz ostatnim poziomem i do nich nic nie dodajemy). Child elementy dodawane sa albo przez bezposrednie dodanie do tablicy children (przykl 1.) albo przez zadeklarowanie w layoucie (przykl 2.) albo wyrenderowanie template'u (przykl 3.), a nastepnie layoutowane.

	przykl 1.

	new ChUI.Panel({
		children: [
			elem1,
			elem2
		]
	});

	przykl 2.

	new ChUI.Panel({
		layout: {
			name: 'horizon',
			items: [
				{
					region: 'north',
					item : element1
				}
			]
		}
	});

	przykl 3.

	new ChUI.Panel({
		tpl: new ChUI.Template(
			'<panel class="mypanel">',
				'<button id="mybutton">Ok</button>'
			'</panel>'
		)
	});

Layout:

Do wyboru mamy pare wariantow layoutu. Na poczatek :
	- auto ()
	- fit (tylko jeden child element, automatycznie powieksza sie do rozmiarow parenta)
	- card (uzywany np do tabow, elementy podzielone na widoki i tylko jeden widok jednoczesnie widoczny)
	- fixed (elementy trzymaja pozycje wobec parent elementu)


Elementy z tablicy children zostaja automatycznie pozycjonowane wewnatrz komponentu. Jesli maja zadeklarowane wymiary to nie zmieniamy ich i probujemy wypozycjonowac inline'owo. Jesli nie, to traktujemy je tak jak domyslnie elementy w DOM, czyli rozszerzaja sie w granicach okreslonych przez layout.

	Przykl 1.

	var pnl2 = new ChUI.Panel({
		layout: 'box'
	});

Templaty:

Templaty musza dawac mozliwosc zadeklarowywania elementow layoutu z wlasciwosciami. Dlatego uzywamy xml-like structury, gdzie uzywamy nazw elementow '<panel>', '<window>' i mozemy im nadac id lub klase. Mozemy rowniez dodac wlasciwosci w definicji elementu :

	'<panel class="mypanel" props={width:500, height:300}></panel>'

lub jesli mamy wiele elementow i nadalismy wszystkim id, mozemy dodac wlasciwosci kazdego z nich w parametrze config templejtu :

		tpl: new ChUI.Template(
			'<panel id="panel-1" class="mypanel" props={width:500, height:300}{dupa}></panel>',
			config: {
				'panel-1': {
					width : 500,
					height: 300
				}
			}
		)

Loopy,
Funkcje wewnatrz templatow,
Wywolywanie funkcji obiektow przekazanych do templatow,
Filtry,
Operacje logiczne i arytmetyczne,
Formatowanie,



KLASY
-------------------

ChUI.Dom.
	Selektory
	- get (uzywa getElementById)
	- select (uzywa getElementsByClassName)
	- query (uzywa querySelector)
	- queryAll (uzywa querySelectorAll)
	
ChUI.Data
	Object
		- merge
		- iterate
	Array
		- merge
		- iterate
	String
		- format

-ChUI.UI.AbstractComponent
	//Properties
	*ID (automatycznie generowane)
	*Class (tablica lub string z nazwami klas)
		"foo bar" / ['foo', 'bar'] - przy inicjalizacji 
	*width
	*height
	*posX
	*posY
	*items
	*layout
	*layer (z-index)

	*super (jaka klase rozszerza nasza klasa)

	//Bazowe funkcje
	- getId
	- paint
	- refresh
	- delete

	//Eventy
	- removeEvent
	- onEvent
	- eventsList

	//Layout
	- getPosition
	- setPosition
	- getSize
	- setSize

	//Style
	- getClass
	- setClass
	- addClass
	- removeClass

	//DOM
	- getItems
	- addItems
	- removeItems
	- setLayout
	- getLayout

	- ChUI.Container
		- show
		- hide
		- resize
		- move
		- scroll

		* dragSource
		* dragZone
		* scrollPosition
			* X
			* Y

ChUI.UI.Template



ChUI.UI.ClassManager


	getClass



Mixiny (czyli funkcjonalnosc, ktora mozemy wmiksowac w dowolne klasy)

Zoomable
Draggable
Scrollable
Resizable
